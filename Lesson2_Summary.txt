===========================================================================
Summary of lesson 2:
===========================================================================

1- git init: iniziale the current directory as a git directory (it will create t	     he .git meta folder)

Important: when creating a repo, git is not creating any commit

2-git status: see which files have changed since the last commit

Working directory: folder location on the hard disk

3-git add file_name: add the file to the staging area

Important: staging area is a zone wehere we save the files we want to commit

4-git commit -m "Message": create a commit

5-git diff(no arguments): run the difference between staging area and working directory		

6-git diff --staged: run the diff between the staging area and the repository (mmost resent commit)

7-git reset --hard: discard any change in the working directory and staging areas	

Importnat: brances are labels givent to the commit (last commit). Master is the main branch and is created authomatically when creating a repository

8-git branch: show all the avilable branches and which one is checkout

9- git branch name: create the brach name

10-git checkout name: switch to the branch checkout

11-git log --graph --oneline brach1 branch2: show the log graph (one line of text) comparing branch1 and branch2

Important: each commit has a refernce to its parent. unreachable commit is a commit tant cannot be reached by any branch

12-git checkout -b new_branch: it is equal to git branch newbranch + git checkout newbranch

Important: when merging two branches git will create a commit with two parents equal to the latest commit of the two original branches. The commit are then show in the log based on the time they are created

13-git merge branch1 branch2: merge branch2 into branch1, I need to checkout the branch I want to merge into

14-git show id: show the diifference between the commit id and its parent

15-git branch -d branch_id: delete the branch id

Important: in case of a conflit when merging, git creates three sections in a file we want to merge: the code on the branch 1 (HEAD, branch we have checked out), the original code and the code in the branch 2
